{"version":3,"names":["kebabCase","require","merge","path","Chalk","Instance","diffImageToSnapshot","runDiffImageToSnapshot","fs","OutdatedSnapshotReporter","timesCalled","Map","SNAPSHOTS_DIR","updateSnapshotState","originalSnapshotState","partialSnapshotState","global","UNSTABLE_SKIP_REPORTING","checkResult","result","snapshotState","retryTimes","snapshotIdentifier","chalk","dumpDiffToConsole","dumpInlineDiffToConsole","allowSizeMismatch","pass","message","updated","added","matched","currentRun","get","unmatched","differencePercentage","diffRatio","failure","diffSize","imageDimensions","baselineWidth","baselineHeight","receivedWidth","receivedHeight","diffPixelCount","bold","red","diffOutputPath","supportedInlineTerms","includes","process","env","TERM_PROGRAM","Buffer","from","toString","imgSrcString","replace","createSnapshotIdentifier","testPath","currentTestName","customSnapshotIdentifier","counter","_counters","defaultIdentifier","basename","customRes","Error","set","configureToMatchImageSnapshot","customDiffConfig","commonCustomDiffConfig","commonCustomSnapshotIdentifier","customSnapshotsDir","commonCustomSnapshotsDir","storeReceivedOnFailure","commonStoreReceivedOnFailure","customReceivedDir","commonCustomReceivedDir","customDiffDir","commonCustomDiffDir","diffDirection","commonDiffDirection","noColors","commonNoColors","failureThreshold","commonFailureThreshold","failureThresholdType","commonFailureThresholdType","updatePassedSnapshot","commonUpdatePassedSnapshot","blur","commonBlur","runInProcess","commonRunInProcess","commonDumpDiffToConsole","commonDumpInlineDiffToConsole","commonAllowSizeMismatch","comparisonMethod","commonComparisonMethod","toMatchImageSnapshot","received","isNot","chalkOptions","level","parseInt","Symbol","for","snapshotsDir","join","dirname","receivedDir","diffDir","baselineSnapshotPath","markTouchedFile","_updateSnapshot","existsSync","imageToSnapshot","receivedImageBuffer","updateSnapshot","Object","assign","module","exports"],"sources":["index.js"],"sourcesContent":["/*\n * Copyright (c) 2017 American Express Travel Related Services Company, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n/* eslint-disable no-underscore-dangle */\nconst kebabCase = require('lodash/kebabCase');\nconst merge = require('lodash/merge');\nconst path = require('path');\nconst Chalk = require('chalk').Instance;\nconst { diffImageToSnapshot, runDiffImageToSnapshot } = require('./diff-snapshot');\nconst fs = require('fs');\nconst OutdatedSnapshotReporter = require('./outdated-snapshot-reporter');\n\nconst timesCalled = new Map();\n\nconst SNAPSHOTS_DIR = '__image_snapshots__';\n\nfunction updateSnapshotState(originalSnapshotState, partialSnapshotState) {\n  if (global.UNSTABLE_SKIP_REPORTING) {\n    return originalSnapshotState;\n  }\n  return merge(originalSnapshotState, partialSnapshotState);\n}\n\nfunction checkResult({\n  result,\n  snapshotState,\n  retryTimes,\n  snapshotIdentifier,\n  chalk,\n  dumpDiffToConsole,\n  dumpInlineDiffToConsole,\n  allowSizeMismatch,\n}) {\n  let pass = true;\n  /*\n    istanbul ignore next\n    `message` is implementation detail. Actual behavior is tested in integration.spec.js\n  */\n  let message = () => '';\n\n  if (result.updated) {\n    // once transition away from jasmine is done this will be a lot more elegant and pure\n    // https://github.com/facebook/jest/pull/3668\n    updateSnapshotState(snapshotState, { updated: snapshotState.updated + 1 });\n  } else if (result.added) {\n    updateSnapshotState(snapshotState, { added: snapshotState.added + 1 });\n  } else {\n    ({ pass } = result);\n\n    if (pass) {\n      updateSnapshotState(snapshotState, { matched: snapshotState.matched + 1 });\n    } else {\n      const currentRun = timesCalled.get(snapshotIdentifier);\n      if (!retryTimes || (currentRun > retryTimes)) {\n        updateSnapshotState(snapshotState, { unmatched: snapshotState.unmatched + 1 });\n      }\n\n      const differencePercentage = result.diffRatio * 100;\n      message = () => {\n        let failure;\n        if (result.diffSize && !allowSizeMismatch) {\n          failure = `Expected image to be the same size as the snapshot (${result.imageDimensions.baselineWidth}x${result.imageDimensions.baselineHeight}), but was different (${result.imageDimensions.receivedWidth}x${result.imageDimensions.receivedHeight}).\\n`;\n        } else {\n          failure = `Expected image to match or be a close match to snapshot but was ${differencePercentage}% different from snapshot (${result.diffPixelCount} differing pixels).\\n`;\n        }\n\n        failure += `${chalk.bold.red('See diff for details:')} ${chalk.red(result.diffOutputPath)}`;\n\n        const supportedInlineTerms = [\n          'iTerm.app',\n          'WezTerm',\n        ];\n\n        if (dumpInlineDiffToConsole && (supportedInlineTerms.includes(process.env.TERM_PROGRAM) || 'ENABLE_INLINE_DIFF' in process.env)) {\n          failure += `\\n\\n\\t\\x1b]1337;File=name=${Buffer.from(result.diffOutputPath).toString('base64')};inline=1;width=40:${result.imgSrcString.replace('data:image/png;base64,', '')}\\x07\\x1b\\n\\n`;\n        } else if (dumpDiffToConsole || dumpInlineDiffToConsole) {\n          failure += `\\n${chalk.bold.red('Or paste below image diff string to your browser`s URL bar.')}\\n ${result.imgSrcString}`;\n        }\n\n        return failure;\n      };\n    }\n  }\n\n  return {\n    message,\n    pass,\n  };\n}\n\nfunction createSnapshotIdentifier({\n  retryTimes,\n  testPath,\n  currentTestName,\n  customSnapshotIdentifier,\n  snapshotState,\n}) {\n  const counter = snapshotState._counters.get(currentTestName);\n  const defaultIdentifier = kebabCase(`${path.basename(testPath)}-${currentTestName}-${counter}`);\n\n  let snapshotIdentifier = customSnapshotIdentifier || `${defaultIdentifier}-snap`;\n\n  if (typeof customSnapshotIdentifier === 'function') {\n    const customRes = customSnapshotIdentifier({\n      testPath, currentTestName, counter, defaultIdentifier,\n    });\n\n    if (retryTimes && !customRes) {\n      throw new Error('A unique customSnapshotIdentifier must be set when jest.retryTimes() is used');\n    }\n\n    snapshotIdentifier = customRes || defaultIdentifier;\n  }\n\n  if (retryTimes) {\n    if (!customSnapshotIdentifier) throw new Error('A unique customSnapshotIdentifier must be set when jest.retryTimes() is used');\n\n    timesCalled.set(snapshotIdentifier, (timesCalled.get(snapshotIdentifier) || 0) + 1);\n  }\n\n  return snapshotIdentifier;\n}\n\nfunction configureToMatchImageSnapshot({\n  customDiffConfig: commonCustomDiffConfig = {},\n  customSnapshotIdentifier: commonCustomSnapshotIdentifier,\n  customSnapshotsDir: commonCustomSnapshotsDir,\n  storeReceivedOnFailure: commonStoreReceivedOnFailure = false,\n  customReceivedDir: commonCustomReceivedDir,\n  customDiffDir: commonCustomDiffDir,\n  diffDirection: commonDiffDirection = 'horizontal',\n  noColors: commonNoColors,\n  failureThreshold: commonFailureThreshold = 0,\n  failureThresholdType: commonFailureThresholdType = 'pixel',\n  updatePassedSnapshot: commonUpdatePassedSnapshot = false,\n  blur: commonBlur = 0,\n  runInProcess: commonRunInProcess = false,\n  dumpDiffToConsole: commonDumpDiffToConsole = false,\n  dumpInlineDiffToConsole: commonDumpInlineDiffToConsole = false,\n  allowSizeMismatch: commonAllowSizeMismatch = false,\n  comparisonMethod: commonComparisonMethod = 'pixelmatch',\n} = {}) {\n  return function toMatchImageSnapshot(received, {\n    customSnapshotIdentifier = commonCustomSnapshotIdentifier,\n    customSnapshotsDir = commonCustomSnapshotsDir,\n    storeReceivedOnFailure = commonStoreReceivedOnFailure,\n    customReceivedDir = commonCustomReceivedDir,\n    customDiffDir = commonCustomDiffDir,\n    diffDirection = commonDiffDirection,\n    customDiffConfig = {},\n    noColors = commonNoColors,\n    failureThreshold = commonFailureThreshold,\n    failureThresholdType = commonFailureThresholdType,\n    updatePassedSnapshot = commonUpdatePassedSnapshot,\n    blur = commonBlur,\n    runInProcess = commonRunInProcess,\n    dumpDiffToConsole = commonDumpDiffToConsole,\n    dumpInlineDiffToConsole = commonDumpInlineDiffToConsole,\n    allowSizeMismatch = commonAllowSizeMismatch,\n    comparisonMethod = commonComparisonMethod,\n  } = {}) {\n    const {\n      testPath, currentTestName, isNot, snapshotState,\n    } = this;\n    const chalkOptions = {};\n    if (typeof noColors !== 'undefined') {\n      // 1 means basic ANSI 16-color support, 0 means no support\n      chalkOptions.level = noColors ? 0 : 1;\n    }\n    const chalk = new Chalk(chalkOptions);\n\n    const retryTimes = parseInt(global[Symbol.for('RETRY_TIMES')], 10) || 0;\n\n    if (isNot) { throw new Error('Jest: `.not` cannot be used with `.toMatchImageSnapshot()`.'); }\n\n    updateSnapshotState(snapshotState, { _counters: snapshotState._counters.set(currentTestName, (snapshotState._counters.get(currentTestName) || 0) + 1) }); // eslint-disable-line max-len\n\n    const snapshotIdentifier = createSnapshotIdentifier({\n      retryTimes,\n      testPath,\n      currentTestName,\n      customSnapshotIdentifier,\n      snapshotState,\n    });\n\n    const snapshotsDir = customSnapshotsDir || path.join(path.dirname(testPath), SNAPSHOTS_DIR);\n    const receivedDir = customReceivedDir;\n    const diffDir = customDiffDir;\n    const baselineSnapshotPath = path.join(snapshotsDir, `${snapshotIdentifier}.png`);\n    OutdatedSnapshotReporter.markTouchedFile(baselineSnapshotPath);\n\n    if (snapshotState._updateSnapshot === 'none' && !fs.existsSync(baselineSnapshotPath)) {\n      return {\n        pass: false,\n        message: () => `New snapshot was ${chalk.bold.red('not written')}. The update flag must be explicitly ` +\n        'passed to write a new snapshot.\\n\\n + This is likely because this test is run in a continuous ' +\n        'integration (CI) environment in which snapshots are not written by default.\\n\\n',\n      };\n    }\n\n    const imageToSnapshot = runInProcess ? diffImageToSnapshot : runDiffImageToSnapshot;\n\n    const result =\n      imageToSnapshot({\n        receivedImageBuffer: received,\n        snapshotsDir,\n        storeReceivedOnFailure,\n        receivedDir,\n        diffDir,\n        diffDirection,\n        snapshotIdentifier,\n        updateSnapshot: snapshotState._updateSnapshot === 'all',\n        customDiffConfig: Object.assign({}, commonCustomDiffConfig, customDiffConfig),\n        failureThreshold,\n        failureThresholdType,\n        updatePassedSnapshot,\n        blur,\n        allowSizeMismatch,\n        comparisonMethod,\n      });\n\n    return checkResult({\n      result,\n      snapshotState,\n      retryTimes,\n      snapshotIdentifier,\n      chalk,\n      dumpDiffToConsole,\n      dumpInlineDiffToConsole,\n      allowSizeMismatch,\n    });\n  };\n}\n\nmodule.exports = {\n  toMatchImageSnapshot: configureToMatchImageSnapshot(),\n  configureToMatchImageSnapshot,\n  updateSnapshotState,\n};\n"],"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"}