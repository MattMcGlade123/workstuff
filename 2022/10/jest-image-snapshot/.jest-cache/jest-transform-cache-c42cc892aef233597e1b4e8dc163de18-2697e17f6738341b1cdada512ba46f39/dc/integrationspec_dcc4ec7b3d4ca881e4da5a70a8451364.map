{"version":3,"names":["fs","require","path","rimraf","uniqueId","sizeOf","SnapshotState","toMatchImageSnapshot","describe","fromStubs","file","resolve","__dirname","imageData","readFileSync","diffOutputDir","snapshotsDir","join","customSnapshotsDir","cleanupRequiredIndicator","getIdentifierIndicatingCleanupIsRequired","getSnapshotFilename","identifier","diffExists","existsSync","beforeAll","global","UNSTABLE_SKIP_REPORTING","expect","extend","beforeEach","sync","afterAll","it","customSnapshotIdentifier","not","toThrowError","toBe","comparisonMethod","updateImageData","updateImageSnapshotPath","writeFileSync","updateModeMatcher","bind","snapshotState","__filename","updateSnapshot","testPath","failureThreshold","failureThresholdType","toEqual","updatePassedSnapshots","comparisonMode","failImageData","oversizeImageData","biggerImageData","expectedError","pathToResultImage","toThrow","toHaveProperty","largeImageData","largeFailureImageData","largeImageFailureDiffData","diffDirection","toMatchObject","width","height","type","runInProcess"],"sources":["integration.spec.js"],"sourcesContent":["/*\n * Copyright (c) 2017 American Express Travel Related Services Company, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst rimraf = require('rimraf');\nconst uniqueId = require('lodash/uniqueId');\nconst sizeOf = require('image-size');\nconst { SnapshotState } = require('jest-snapshot');\nconst { toMatchImageSnapshot } = require('../src');\n\ndescribe('toMatchImageSnapshot', () => {\n  const fromStubs = file => path.resolve(__dirname, './stubs', file);\n  const imageData = fs.readFileSync(fromStubs('TestImage.png'));\n  const diffOutputDir = (snapshotsDir = '__image_snapshots__') => path.join(snapshotsDir, '/__diff_output__/');\n  const customSnapshotsDir = path.resolve(__dirname, '__custom_snapshots_dir__');\n  const cleanupRequiredIndicator = 'cleanup-required-';\n  const getIdentifierIndicatingCleanupIsRequired = () => uniqueId(cleanupRequiredIndicator);\n  const getSnapshotFilename = identifier => `${identifier}.png`;\n  const diffExists = identifier => fs.existsSync(path.join(__dirname, diffOutputDir(), `${identifier}-diff.png`));\n\n  beforeAll(() => {\n    // In tests, skip reporting (skip snapshotState update to not mess with our test report)\n    global.UNSTABLE_SKIP_REPORTING = true;\n    expect.extend({ toMatchImageSnapshot });\n  });\n\n  beforeEach(() => {\n    rimraf.sync(`**/${cleanupRequiredIndicator}*`);\n  });\n\n  afterAll(() => {\n    rimraf.sync(`**/${cleanupRequiredIndicator}*`);\n  });\n\n  describe('happy path', () => {\n    it('writes snapshot with no error if there is not one stored already', () => {\n      const snapshotsDir = path.resolve(__dirname, '__image_snapshots__');\n      const customSnapshotIdentifier = getIdentifierIndicatingCleanupIsRequired();\n\n      expect(\n        () => expect(imageData).toMatchImageSnapshot({ customSnapshotIdentifier })\n      ).not.toThrowError();\n      expect(\n        fs.existsSync(path.join(snapshotsDir, getSnapshotFilename(customSnapshotIdentifier)))\n      ).toBe(true);\n    });\n\n    it('matches an identical snapshot', () => {\n      expect(() => expect(imageData).toMatchImageSnapshot()).not.toThrowError();\n    });\n\n    it('creates a snapshot in a custom directory if such is specified', () => {\n      const customSnapshotIdentifier = getIdentifierIndicatingCleanupIsRequired();\n\n      // First we need to write a new snapshot image\n      expect(\n        () => expect(imageData).toMatchImageSnapshot({ customSnapshotIdentifier, customSnapshotsDir }) // eslint-disable-line max-len\n      ).not.toThrowError();\n\n      expect(\n        fs.existsSync(path.join(customSnapshotsDir, getSnapshotFilename(customSnapshotIdentifier)))\n      ).toBe(true);\n    });\n\n    it('does not write a result image for passing tests', () => {\n      const customSnapshotIdentifier = 'integration-6';\n\n      // First we need to write a new snapshot image\n      expect(\n        () => expect(imageData).toMatchImageSnapshot({ customSnapshotIdentifier })\n      ).not.toThrowError();\n\n      expect(diffExists(customSnapshotIdentifier)).toBe(false);\n    });\n\n    it('does not write a result image for passing tests (ssim)', () => {\n      const customSnapshotIdentifier = 'integration-6';\n\n      // First we need to write a new snapshot image\n      expect(\n        () => expect(imageData).toMatchImageSnapshot({\n          customSnapshotIdentifier,\n          comparisonMethod: 'ssim',\n        })\n      ).not.toThrowError();\n\n      expect(diffExists(customSnapshotIdentifier)).toBe(false);\n    });\n  });\n\n  describe('updates', () => {\n    const customSnapshotIdentifier = 'integration-update';\n    const updateImageData = fs.readFileSync(fromStubs('TestImageUpdate1pxOff.png'));\n    const updateImageSnapshotPath = path.join(__dirname, '__image_snapshots__', `${customSnapshotIdentifier}.png`);\n\n    beforeEach(() => {\n      fs.writeFileSync(updateImageSnapshotPath, imageData);\n    });\n\n    afterAll(() => {\n      fs.writeFileSync(updateImageSnapshotPath, imageData);\n    });\n\n    it('does not write a result image for passing tests in update mode by default', () => {\n      const updateModeMatcher = toMatchImageSnapshot.bind({\n        snapshotState: new SnapshotState(__filename, {\n          updateSnapshot: 'all',\n        }),\n        testPath: __filename,\n      });\n      updateModeMatcher(updateImageData, {\n        customSnapshotIdentifier,\n        failureThreshold: 2,\n        failureThresholdType: 'pixel',\n      });\n      expect(fs.readFileSync(updateImageSnapshotPath)).toEqual(imageData);\n    });\n\n    it('writes a result image for passing test in update mode with updatePassedSnapshots: true', () => {\n      const updateModeMatcher = toMatchImageSnapshot.bind({\n        snapshotState: new SnapshotState(__filename, {\n          updateSnapshot: 'all',\n        }),\n        testPath: __filename,\n      });\n      updateModeMatcher(updateImageData, {\n        customSnapshotIdentifier,\n        updatePassedSnapshots: true,\n        failureThreshold: 2,\n        failureThresholdType: 'pixel',\n      });\n      expect(fs.readFileSync(updateImageSnapshotPath)).not.toEqual(updateImageData);\n    });\n\n    it('writes a result image for passing test in update mode with updatePassedSnapshots: true (ssim)', () => {\n      const updateModeMatcher = toMatchImageSnapshot.bind({\n        snapshotState: new SnapshotState(__filename, {\n          updateSnapshot: 'all',\n        }),\n        testPath: __filename,\n      });\n      updateModeMatcher(updateImageData, {\n        customSnapshotIdentifier,\n        updatePassedSnapshots: true,\n        failureThreshold: 2,\n        failureThresholdType: 'pixel',\n        comparisonMode: 'ssim',\n      });\n      expect(fs.readFileSync(updateImageSnapshotPath)).not.toEqual(updateImageData);\n    });\n\n    it('writes a result image for failing test in update mode by default', () => {\n      const updateModeMatcher = toMatchImageSnapshot.bind({\n        snapshotState: new SnapshotState(__filename, {\n          updateSnapshot: 'all',\n        }),\n        testPath: __filename,\n      });\n      updateModeMatcher(updateImageData, {\n        customSnapshotIdentifier,\n        failureThreshold: 0,\n        failureThresholdType: 'pixel',\n      });\n      expect(fs.readFileSync(updateImageSnapshotPath)).toEqual(updateImageData);\n    });\n\n    it('writes a result image for failing test in update mode with updatePassedSnapshots: false', () => {\n      const updateModeMatcher = toMatchImageSnapshot.bind({\n        snapshotState: new SnapshotState(__filename, {\n          updateSnapshot: 'all',\n        }),\n        testPath: __filename,\n      });\n      updateModeMatcher(updateImageData, {\n        customSnapshotIdentifier,\n        updatePassedSnapshots: true,\n        failureThreshold: 0,\n        failureThresholdType: 'pixel',\n      });\n      expect(fs.readFileSync(updateImageSnapshotPath)).toEqual(updateImageData);\n    });\n\n    it('writes a result image for failing test in update mode with updatePassedSnapshots: false (ssim)', () => {\n      const updateModeMatcher = toMatchImageSnapshot.bind({\n        snapshotState: new SnapshotState(__filename, {\n          updateSnapshot: 'all',\n        }),\n        testPath: __filename,\n      });\n      updateModeMatcher(updateImageData, {\n        customSnapshotIdentifier,\n        updatePassedSnapshots: false,\n        failureThreshold: 0,\n        failureThresholdType: 'pixel',\n        comparisonMode: 'ssim',\n      });\n      expect(fs.readFileSync(updateImageSnapshotPath)).toEqual(updateImageData);\n    });\n  });\n\n  describe('failures', () => {\n    const failImageData = fs.readFileSync(fromStubs('TestImageFailure.png'));\n    const oversizeImageData = fs.readFileSync(fromStubs('TestImageFailureOversize.png'));\n    const biggerImageData = fs.readFileSync(fromStubs('TestImage150x150.png'));\n\n    it('fails for a different snapshot', () => {\n      const expectedError = /^Expected image to match or be a close match to snapshot but was 86\\.45% different from snapshot \\(8645 differing pixels\\)\\./;\n      const customSnapshotIdentifier = getIdentifierIndicatingCleanupIsRequired();\n\n      // Write a new snapshot image\n      expect(\n        () => expect(imageData).toMatchImageSnapshot({ customSnapshotIdentifier })\n      ).not.toThrowError();\n\n      // Test against a different image\n      expect(\n        () => expect(failImageData).toMatchImageSnapshot({ customSnapshotIdentifier })\n      ).toThrowError(expectedError);\n    });\n\n    it('fails with differently sized images and outputs diff', () => {\n      const customSnapshotIdentifier = getIdentifierIndicatingCleanupIsRequired();\n\n      // First we need to write a new snapshot image\n      expect(\n        () => expect(imageData).toMatchImageSnapshot({ customSnapshotIdentifier })\n      ).not.toThrowError();\n\n      // Test against an image much larger than the snapshot.\n      expect(\n        () => expect(oversizeImageData).toMatchImageSnapshot({ customSnapshotIdentifier })\n      ).toThrowError(/Expected image to be the same size as the snapshot \\(100x100\\), but was different \\(153x145\\)/);\n\n      expect(diffExists(customSnapshotIdentifier))\n        .toBe(true);\n    });\n\n    it('fails with images without diff pixels after being resized', () => {\n      const customSnapshotIdentifier = getIdentifierIndicatingCleanupIsRequired();\n\n      expect(\n        () => expect(imageData).toMatchImageSnapshot({ customSnapshotIdentifier })\n      ).not.toThrowError();\n\n      expect(\n        () => expect(biggerImageData).toMatchImageSnapshot({ customSnapshotIdentifier })\n      ).toThrowError(/Expected image to be the same size as the snapshot \\(100x100\\), but was different \\(150x150\\)/);\n\n      expect(diffExists(customSnapshotIdentifier)).toBe(true);\n    });\n\n    it('writes a result image for failing tests', () => {\n      const customSnapshotIdentifier = getIdentifierIndicatingCleanupIsRequired();\n      const pathToResultImage = path.join(__dirname, diffOutputDir(), `${customSnapshotIdentifier}-diff.png`);\n      // First we need to write a new snapshot image\n      expect(\n        () => expect(imageData)\n          .toMatchImageSnapshot({ customSnapshotIdentifier })\n      ).not.toThrowError();\n\n      // then test against a different image\n      expect(\n        () => expect(failImageData)\n          .toMatchImageSnapshot({ customSnapshotIdentifier })\n      ).toThrow();\n\n      expect(fs.existsSync(pathToResultImage))\n        .toBe(true);\n\n      // just because file was written does not mean it is a png image\n      expect(sizeOf(pathToResultImage)).toHaveProperty('type', 'png');\n    });\n\n    it('writes a result image for failing tests (ssim)', () => {\n      const largeImageData = fs.readFileSync(fromStubs('LargeTestImage.png'));\n      const largeFailureImageData = fs.readFileSync(fromStubs('LargeTestImageFailure.png'));\n      const largeImageFailureDiffData =\n        fs.readFileSync(fromStubs('LargeTestImage-LargeTestImageFailure-ssim-diff.png'));\n      const customSnapshotIdentifier = getIdentifierIndicatingCleanupIsRequired();\n      const pathToResultImage = path.join(__dirname, diffOutputDir(), `${customSnapshotIdentifier}-diff.png`);\n      // First we need to write a new snapshot image\n      expect(\n        () => expect(largeImageData)\n          .toMatchImageSnapshot({\n            customSnapshotIdentifier, comparisonMethod: 'ssim',\n          })\n      )\n        .not\n        .toThrowError();\n\n      // then test against a different image\n      expect(\n        () => expect(largeFailureImageData)\n          .toMatchImageSnapshot({\n            customSnapshotIdentifier, comparisonMethod: 'ssim',\n          })\n      )\n        .toThrow();\n\n      expect(fs.existsSync(pathToResultImage))\n        .toBe(true);\n\n      expect(fs.readFileSync(pathToResultImage)).toEqual(largeImageFailureDiffData);\n      // just because file was written does not mean it is a png image\n      expect(sizeOf(pathToResultImage))\n        .toHaveProperty('type', 'png');\n    });\n\n    it('writes a result image for failing tests with horizontal layout', () => {\n      const customSnapshotIdentifier = getIdentifierIndicatingCleanupIsRequired();\n      const pathToResultImage = path.join(__dirname, diffOutputDir(), `${customSnapshotIdentifier}-diff.png`);\n      // First we need to write a new snapshot image\n      expect(\n        () => expect(imageData)\n          .toMatchImageSnapshot({\n            customSnapshotIdentifier,\n            diffDirection: 'horizontal',\n          })\n      )\n        .not\n        .toThrowError();\n\n      // then test against a different image\n      expect(\n        () => expect(failImageData)\n          .toMatchImageSnapshot({\n            customSnapshotIdentifier,\n            diffDirection: 'horizontal',\n          })\n      )\n        .toThrow();\n\n      expect(fs.existsSync(pathToResultImage))\n        .toBe(true);\n\n      expect(sizeOf(pathToResultImage))\n        .toMatchObject({\n          width: 300,\n          height: 100,\n          type: 'png',\n        });\n    });\n\n    it('writes a result image for failing tests with vertical layout', () => {\n      const customSnapshotIdentifier = getIdentifierIndicatingCleanupIsRequired();\n      const pathToResultImage = path.join(__dirname, diffOutputDir(), `${customSnapshotIdentifier}-diff.png`);\n      // First we need to write a new snapshot image\n      expect(\n        () => expect(imageData)\n          .toMatchImageSnapshot({\n            customSnapshotIdentifier,\n            diffDirection: 'vertical',\n          })\n      )\n        .not\n        .toThrowError();\n\n      // then test against a different image\n      expect(\n        () => expect(failImageData)\n          .toMatchImageSnapshot({\n            customSnapshotIdentifier,\n            diffDirection: 'vertical',\n          })\n      )\n        .toThrow();\n\n      expect(fs.existsSync(pathToResultImage))\n        .toBe(true);\n\n      expect(sizeOf(pathToResultImage))\n        .toMatchObject({\n          width: 100,\n          height: 300,\n          type: 'png',\n        });\n    });\n\n    it('removes result image from previous test runs for the same snapshot', () => {\n      const customSnapshotIdentifier = getIdentifierIndicatingCleanupIsRequired();\n      // First we need to write a new snapshot image\n      expect(\n        () => expect(imageData)\n          .toMatchImageSnapshot({ customSnapshotIdentifier })\n      ).not.toThrowError();\n\n      // then test against a different image (to generate a results image)\n      expect(\n        () => expect(failImageData).toMatchImageSnapshot({ customSnapshotIdentifier })\n      ).toThrow();\n\n      // then test against image that should not generate results image (as it is passing test)\n      expect(\n        () => expect(imageData).toMatchImageSnapshot({ customSnapshotIdentifier })\n      ).not.toThrowError();\n\n      expect(diffExists(customSnapshotIdentifier))\n        .toBe(false);\n    });\n\n    it('handles diffs for large images', () => {\n      const largeImageData = fs.readFileSync(fromStubs('LargeTestImage.png'));\n      const largeFailureImageData = fs.readFileSync(fromStubs('LargeTestImageFailure.png'));\n      const customSnapshotIdentifier = getIdentifierIndicatingCleanupIsRequired();\n      // First we need to write a new snapshot image\n      expect(\n        () => expect(largeImageData).toMatchImageSnapshot({ customSnapshotIdentifier })\n      ).not.toThrowError();\n\n      // then test against a different image\n      expect(\n        () => expect(largeFailureImageData).toMatchImageSnapshot({ customSnapshotIdentifier })\n      ).toThrow(/Expected image to match or be a close match/);\n    });\n\n    describe('Desktop Images Test', () => {\n      it('not to throw at 6pct with pixelmatch with', () => {\n        const largeImageData = fs.readFileSync(fromStubs('Desktop 1_082.png'));\n        const largeFailureImageData = fs.readFileSync(fromStubs('Desktop 1_083.png'));\n        const customSnapshotIdentifier = getIdentifierIndicatingCleanupIsRequired();\n        // First we need to write a new snapshot image\n        expect(\n          () => expect(largeImageData)\n            .toMatchImageSnapshot({\n              failureThreshold: 0.06,\n              failureThresholdType: 'percent',\n              customSnapshotIdentifier,\n            })\n        )\n          .not\n          .toThrowError();\n\n        // then test against a different image\n        expect(\n          () => expect(largeFailureImageData)\n            .toMatchImageSnapshot({\n              failureThreshold: 0.06,\n              failureThresholdType: 'percent',\n              customSnapshotIdentifier,\n            })\n        )\n          .not\n          .toThrowError();\n      });\n      it('to throw at 1pct with SSIM', () => {\n        const largeImageData = fs.readFileSync(fromStubs('Desktop 1_082.png'));\n        const largeFailureImageData = fs.readFileSync(fromStubs('Desktop 1_083.png'));\n        const customSnapshotIdentifier = getIdentifierIndicatingCleanupIsRequired();\n        // First we need to write a new snapshot image\n        expect(\n          () => expect(largeImageData)\n            .toMatchImageSnapshot({\n              comparisonMethod: 'ssim',\n              failureThreshold: 0.01,\n              failureThresholdType: 'percent',\n              customSnapshotIdentifier,\n            })\n        )\n          .not\n          .toThrowError();\n\n        // then test against a different image\n        expect(\n          () => expect(largeFailureImageData)\n            .toMatchImageSnapshot({\n              comparisonMethod: 'ssim',\n              failureThreshold: 0.01,\n              failureThresholdType: 'percent',\n              customSnapshotIdentifier,\n              // required for coverage\n              runInProcess: true,\n            })\n        )\n          .toThrow(/Expected image to match or be a close match/);\n      });\n    });\n  });\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMG,QAAQ,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAC3C,MAAMI,MAAM,GAAGJ,OAAO,CAAC,YAAY,CAAC;AACpC,MAAM;EAAEK;AAAc,CAAC,GAAGL,OAAO,CAAC,eAAe,CAAC;AAClD,MAAM;EAAEM;AAAqB,CAAC,GAAGN,OAAO,CAAC,QAAQ,CAAC;AAElDO,QAAQ,CAAC,sBAAsB,EAAE,MAAM;EACrC,MAAMC,SAAS,GAAGC,IAAI,IAAIR,IAAI,CAACS,OAAO,CAACC,SAAS,EAAE,SAAS,EAAEF,IAAI,CAAC;EAClE,MAAMG,SAAS,GAAGb,EAAE,CAACc,YAAY,CAACL,SAAS,CAAC,eAAe,CAAC,CAAC;EAC7D,MAAMM,aAAa,GAAG,CAACC,YAAY,GAAG,qBAAqB,KAAKd,IAAI,CAACe,IAAI,CAACD,YAAY,EAAE,mBAAmB,CAAC;EAC5G,MAAME,kBAAkB,GAAGhB,IAAI,CAACS,OAAO,CAACC,SAAS,EAAE,0BAA0B,CAAC;EAC9E,MAAMO,wBAAwB,GAAG,mBAAmB;EACpD,MAAMC,wCAAwC,GAAG,MAAMhB,QAAQ,CAACe,wBAAwB,CAAC;EACzF,MAAME,mBAAmB,GAAGC,UAAU,IAAK,GAAEA,UAAW,MAAK;EAC7D,MAAMC,UAAU,GAAGD,UAAU,IAAItB,EAAE,CAACwB,UAAU,CAACtB,IAAI,CAACe,IAAI,CAACL,SAAS,EAAEG,aAAa,EAAE,EAAG,GAAEO,UAAW,WAAU,CAAC,CAAC;EAE/GG,SAAS,CAAC,MAAM;IACd;IACAC,MAAM,CAACC,uBAAuB,GAAG,IAAI;IACrCC,MAAM,CAACC,MAAM,CAAC;MAAEtB;IAAqB,CAAC,CAAC;EACzC,CAAC,CAAC;EAEFuB,UAAU,CAAC,MAAM;IACf3B,MAAM,CAAC4B,IAAI,CAAE,MAAKZ,wBAAyB,GAAE,CAAC;EAChD,CAAC,CAAC;EAEFa,QAAQ,CAAC,MAAM;IACb7B,MAAM,CAAC4B,IAAI,CAAE,MAAKZ,wBAAyB,GAAE,CAAC;EAChD,CAAC,CAAC;EAEFX,QAAQ,CAAC,YAAY,EAAE,MAAM;IAC3ByB,EAAE,CAAC,kEAAkE,EAAE,MAAM;MAC3E,MAAMjB,YAAY,GAAGd,IAAI,CAACS,OAAO,CAACC,SAAS,EAAE,qBAAqB,CAAC;MACnE,MAAMsB,wBAAwB,GAAGd,wCAAwC,EAAE;MAE3EQ,MAAM,CACJ,MAAMA,MAAM,CAACf,SAAS,CAAC,CAACN,oBAAoB,CAAC;QAAE2B;MAAyB,CAAC,CAAC,CAC3E,CAACC,GAAG,CAACC,YAAY,EAAE;MACpBR,MAAM,CACJ5B,EAAE,CAACwB,UAAU,CAACtB,IAAI,CAACe,IAAI,CAACD,YAAY,EAAEK,mBAAmB,CAACa,wBAAwB,CAAC,CAAC,CAAC,CACtF,CAACG,IAAI,CAAC,IAAI,CAAC;IACd,CAAC,CAAC;IAEFJ,EAAE,CAAC,+BAA+B,EAAE,MAAM;MACxCL,MAAM,CAAC,MAAMA,MAAM,CAACf,SAAS,CAAC,CAACN,oBAAoB,EAAE,CAAC,CAAC4B,GAAG,CAACC,YAAY,EAAE;IAC3E,CAAC,CAAC;IAEFH,EAAE,CAAC,+DAA+D,EAAE,MAAM;MACxE,MAAMC,wBAAwB,GAAGd,wCAAwC,EAAE;;MAE3E;MACAQ,MAAM,CACJ,MAAMA,MAAM,CAACf,SAAS,CAAC,CAACN,oBAAoB,CAAC;QAAE2B,wBAAwB;QAAEhB;MAAmB,CAAC,CAAC,CAAC;MAAA,CAChG,CAACiB,GAAG,CAACC,YAAY,EAAE;MAEpBR,MAAM,CACJ5B,EAAE,CAACwB,UAAU,CAACtB,IAAI,CAACe,IAAI,CAACC,kBAAkB,EAAEG,mBAAmB,CAACa,wBAAwB,CAAC,CAAC,CAAC,CAC5F,CAACG,IAAI,CAAC,IAAI,CAAC;IACd,CAAC,CAAC;IAEFJ,EAAE,CAAC,iDAAiD,EAAE,MAAM;MAC1D,MAAMC,wBAAwB,GAAG,eAAe;;MAEhD;MACAN,MAAM,CACJ,MAAMA,MAAM,CAACf,SAAS,CAAC,CAACN,oBAAoB,CAAC;QAAE2B;MAAyB,CAAC,CAAC,CAC3E,CAACC,GAAG,CAACC,YAAY,EAAE;MAEpBR,MAAM,CAACL,UAAU,CAACW,wBAAwB,CAAC,CAAC,CAACG,IAAI,CAAC,KAAK,CAAC;IAC1D,CAAC,CAAC;IAEFJ,EAAE,CAAC,wDAAwD,EAAE,MAAM;MACjE,MAAMC,wBAAwB,GAAG,eAAe;;MAEhD;MACAN,MAAM,CACJ,MAAMA,MAAM,CAACf,SAAS,CAAC,CAACN,oBAAoB,CAAC;QAC3C2B,wBAAwB;QACxBI,gBAAgB,EAAE;MACpB,CAAC,CAAC,CACH,CAACH,GAAG,CAACC,YAAY,EAAE;MAEpBR,MAAM,CAACL,UAAU,CAACW,wBAAwB,CAAC,CAAC,CAACG,IAAI,CAAC,KAAK,CAAC;IAC1D,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF7B,QAAQ,CAAC,SAAS,EAAE,MAAM;IACxB,MAAM0B,wBAAwB,GAAG,oBAAoB;IACrD,MAAMK,eAAe,GAAGvC,EAAE,CAACc,YAAY,CAACL,SAAS,CAAC,2BAA2B,CAAC,CAAC;IAC/E,MAAM+B,uBAAuB,GAAGtC,IAAI,CAACe,IAAI,CAACL,SAAS,EAAE,qBAAqB,EAAG,GAAEsB,wBAAyB,MAAK,CAAC;IAE9GJ,UAAU,CAAC,MAAM;MACf9B,EAAE,CAACyC,aAAa,CAACD,uBAAuB,EAAE3B,SAAS,CAAC;IACtD,CAAC,CAAC;IAEFmB,QAAQ,CAAC,MAAM;MACbhC,EAAE,CAACyC,aAAa,CAACD,uBAAuB,EAAE3B,SAAS,CAAC;IACtD,CAAC,CAAC;IAEFoB,EAAE,CAAC,2EAA2E,EAAE,MAAM;MACpF,MAAMS,iBAAiB,GAAGnC,oBAAoB,CAACoC,IAAI,CAAC;QAClDC,aAAa,EAAE,IAAItC,aAAa,CAACuC,UAAU,EAAE;UAC3CC,cAAc,EAAE;QAClB,CAAC,CAAC;QACFC,QAAQ,EAAEF;MACZ,CAAC,CAAC;MACFH,iBAAiB,CAACH,eAAe,EAAE;QACjCL,wBAAwB;QACxBc,gBAAgB,EAAE,CAAC;QACnBC,oBAAoB,EAAE;MACxB,CAAC,CAAC;MACFrB,MAAM,CAAC5B,EAAE,CAACc,YAAY,CAAC0B,uBAAuB,CAAC,CAAC,CAACU,OAAO,CAACrC,SAAS,CAAC;IACrE,CAAC,CAAC;IAEFoB,EAAE,CAAC,wFAAwF,EAAE,MAAM;MACjG,MAAMS,iBAAiB,GAAGnC,oBAAoB,CAACoC,IAAI,CAAC;QAClDC,aAAa,EAAE,IAAItC,aAAa,CAACuC,UAAU,EAAE;UAC3CC,cAAc,EAAE;QAClB,CAAC,CAAC;QACFC,QAAQ,EAAEF;MACZ,CAAC,CAAC;MACFH,iBAAiB,CAACH,eAAe,EAAE;QACjCL,wBAAwB;QACxBiB,qBAAqB,EAAE,IAAI;QAC3BH,gBAAgB,EAAE,CAAC;QACnBC,oBAAoB,EAAE;MACxB,CAAC,CAAC;MACFrB,MAAM,CAAC5B,EAAE,CAACc,YAAY,CAAC0B,uBAAuB,CAAC,CAAC,CAACL,GAAG,CAACe,OAAO,CAACX,eAAe,CAAC;IAC/E,CAAC,CAAC;IAEFN,EAAE,CAAC,+FAA+F,EAAE,MAAM;MACxG,MAAMS,iBAAiB,GAAGnC,oBAAoB,CAACoC,IAAI,CAAC;QAClDC,aAAa,EAAE,IAAItC,aAAa,CAACuC,UAAU,EAAE;UAC3CC,cAAc,EAAE;QAClB,CAAC,CAAC;QACFC,QAAQ,EAAEF;MACZ,CAAC,CAAC;MACFH,iBAAiB,CAACH,eAAe,EAAE;QACjCL,wBAAwB;QACxBiB,qBAAqB,EAAE,IAAI;QAC3BH,gBAAgB,EAAE,CAAC;QACnBC,oBAAoB,EAAE,OAAO;QAC7BG,cAAc,EAAE;MAClB,CAAC,CAAC;MACFxB,MAAM,CAAC5B,EAAE,CAACc,YAAY,CAAC0B,uBAAuB,CAAC,CAAC,CAACL,GAAG,CAACe,OAAO,CAACX,eAAe,CAAC;IAC/E,CAAC,CAAC;IAEFN,EAAE,CAAC,kEAAkE,EAAE,MAAM;MAC3E,MAAMS,iBAAiB,GAAGnC,oBAAoB,CAACoC,IAAI,CAAC;QAClDC,aAAa,EAAE,IAAItC,aAAa,CAACuC,UAAU,EAAE;UAC3CC,cAAc,EAAE;QAClB,CAAC,CAAC;QACFC,QAAQ,EAAEF;MACZ,CAAC,CAAC;MACFH,iBAAiB,CAACH,eAAe,EAAE;QACjCL,wBAAwB;QACxBc,gBAAgB,EAAE,CAAC;QACnBC,oBAAoB,EAAE;MACxB,CAAC,CAAC;MACFrB,MAAM,CAAC5B,EAAE,CAACc,YAAY,CAAC0B,uBAAuB,CAAC,CAAC,CAACU,OAAO,CAACX,eAAe,CAAC;IAC3E,CAAC,CAAC;IAEFN,EAAE,CAAC,yFAAyF,EAAE,MAAM;MAClG,MAAMS,iBAAiB,GAAGnC,oBAAoB,CAACoC,IAAI,CAAC;QAClDC,aAAa,EAAE,IAAItC,aAAa,CAACuC,UAAU,EAAE;UAC3CC,cAAc,EAAE;QAClB,CAAC,CAAC;QACFC,QAAQ,EAAEF;MACZ,CAAC,CAAC;MACFH,iBAAiB,CAACH,eAAe,EAAE;QACjCL,wBAAwB;QACxBiB,qBAAqB,EAAE,IAAI;QAC3BH,gBAAgB,EAAE,CAAC;QACnBC,oBAAoB,EAAE;MACxB,CAAC,CAAC;MACFrB,MAAM,CAAC5B,EAAE,CAACc,YAAY,CAAC0B,uBAAuB,CAAC,CAAC,CAACU,OAAO,CAACX,eAAe,CAAC;IAC3E,CAAC,CAAC;IAEFN,EAAE,CAAC,gGAAgG,EAAE,MAAM;MACzG,MAAMS,iBAAiB,GAAGnC,oBAAoB,CAACoC,IAAI,CAAC;QAClDC,aAAa,EAAE,IAAItC,aAAa,CAACuC,UAAU,EAAE;UAC3CC,cAAc,EAAE;QAClB,CAAC,CAAC;QACFC,QAAQ,EAAEF;MACZ,CAAC,CAAC;MACFH,iBAAiB,CAACH,eAAe,EAAE;QACjCL,wBAAwB;QACxBiB,qBAAqB,EAAE,KAAK;QAC5BH,gBAAgB,EAAE,CAAC;QACnBC,oBAAoB,EAAE,OAAO;QAC7BG,cAAc,EAAE;MAClB,CAAC,CAAC;MACFxB,MAAM,CAAC5B,EAAE,CAACc,YAAY,CAAC0B,uBAAuB,CAAC,CAAC,CAACU,OAAO,CAACX,eAAe,CAAC;IAC3E,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF/B,QAAQ,CAAC,UAAU,EAAE,MAAM;IACzB,MAAM6C,aAAa,GAAGrD,EAAE,CAACc,YAAY,CAACL,SAAS,CAAC,sBAAsB,CAAC,CAAC;IACxE,MAAM6C,iBAAiB,GAAGtD,EAAE,CAACc,YAAY,CAACL,SAAS,CAAC,8BAA8B,CAAC,CAAC;IACpF,MAAM8C,eAAe,GAAGvD,EAAE,CAACc,YAAY,CAACL,SAAS,CAAC,sBAAsB,CAAC,CAAC;IAE1EwB,EAAE,CAAC,gCAAgC,EAAE,MAAM;MACzC,MAAMuB,aAAa,GAAG,8HAA8H;MACpJ,MAAMtB,wBAAwB,GAAGd,wCAAwC,EAAE;;MAE3E;MACAQ,MAAM,CACJ,MAAMA,MAAM,CAACf,SAAS,CAAC,CAACN,oBAAoB,CAAC;QAAE2B;MAAyB,CAAC,CAAC,CAC3E,CAACC,GAAG,CAACC,YAAY,EAAE;;MAEpB;MACAR,MAAM,CACJ,MAAMA,MAAM,CAACyB,aAAa,CAAC,CAAC9C,oBAAoB,CAAC;QAAE2B;MAAyB,CAAC,CAAC,CAC/E,CAACE,YAAY,CAACoB,aAAa,CAAC;IAC/B,CAAC,CAAC;IAEFvB,EAAE,CAAC,sDAAsD,EAAE,MAAM;MAC/D,MAAMC,wBAAwB,GAAGd,wCAAwC,EAAE;;MAE3E;MACAQ,MAAM,CACJ,MAAMA,MAAM,CAACf,SAAS,CAAC,CAACN,oBAAoB,CAAC;QAAE2B;MAAyB,CAAC,CAAC,CAC3E,CAACC,GAAG,CAACC,YAAY,EAAE;;MAEpB;MACAR,MAAM,CACJ,MAAMA,MAAM,CAAC0B,iBAAiB,CAAC,CAAC/C,oBAAoB,CAAC;QAAE2B;MAAyB,CAAC,CAAC,CACnF,CAACE,YAAY,CAAC,+FAA+F,CAAC;MAE/GR,MAAM,CAACL,UAAU,CAACW,wBAAwB,CAAC,CAAC,CACzCG,IAAI,CAAC,IAAI,CAAC;IACf,CAAC,CAAC;IAEFJ,EAAE,CAAC,2DAA2D,EAAE,MAAM;MACpE,MAAMC,wBAAwB,GAAGd,wCAAwC,EAAE;MAE3EQ,MAAM,CACJ,MAAMA,MAAM,CAACf,SAAS,CAAC,CAACN,oBAAoB,CAAC;QAAE2B;MAAyB,CAAC,CAAC,CAC3E,CAACC,GAAG,CAACC,YAAY,EAAE;MAEpBR,MAAM,CACJ,MAAMA,MAAM,CAAC2B,eAAe,CAAC,CAAChD,oBAAoB,CAAC;QAAE2B;MAAyB,CAAC,CAAC,CACjF,CAACE,YAAY,CAAC,+FAA+F,CAAC;MAE/GR,MAAM,CAACL,UAAU,CAACW,wBAAwB,CAAC,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC;IACzD,CAAC,CAAC;IAEFJ,EAAE,CAAC,yCAAyC,EAAE,MAAM;MAClD,MAAMC,wBAAwB,GAAGd,wCAAwC,EAAE;MAC3E,MAAMqC,iBAAiB,GAAGvD,IAAI,CAACe,IAAI,CAACL,SAAS,EAAEG,aAAa,EAAE,EAAG,GAAEmB,wBAAyB,WAAU,CAAC;MACvG;MACAN,MAAM,CACJ,MAAMA,MAAM,CAACf,SAAS,CAAC,CACpBN,oBAAoB,CAAC;QAAE2B;MAAyB,CAAC,CAAC,CACtD,CAACC,GAAG,CAACC,YAAY,EAAE;;MAEpB;MACAR,MAAM,CACJ,MAAMA,MAAM,CAACyB,aAAa,CAAC,CACxB9C,oBAAoB,CAAC;QAAE2B;MAAyB,CAAC,CAAC,CACtD,CAACwB,OAAO,EAAE;MAEX9B,MAAM,CAAC5B,EAAE,CAACwB,UAAU,CAACiC,iBAAiB,CAAC,CAAC,CACrCpB,IAAI,CAAC,IAAI,CAAC;;MAEb;MACAT,MAAM,CAACvB,MAAM,CAACoD,iBAAiB,CAAC,CAAC,CAACE,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC;IACjE,CAAC,CAAC;IAEF1B,EAAE,CAAC,gDAAgD,EAAE,MAAM;MACzD,MAAM2B,cAAc,GAAG5D,EAAE,CAACc,YAAY,CAACL,SAAS,CAAC,oBAAoB,CAAC,CAAC;MACvE,MAAMoD,qBAAqB,GAAG7D,EAAE,CAACc,YAAY,CAACL,SAAS,CAAC,2BAA2B,CAAC,CAAC;MACrF,MAAMqD,yBAAyB,GAC7B9D,EAAE,CAACc,YAAY,CAACL,SAAS,CAAC,oDAAoD,CAAC,CAAC;MAClF,MAAMyB,wBAAwB,GAAGd,wCAAwC,EAAE;MAC3E,MAAMqC,iBAAiB,GAAGvD,IAAI,CAACe,IAAI,CAACL,SAAS,EAAEG,aAAa,EAAE,EAAG,GAAEmB,wBAAyB,WAAU,CAAC;MACvG;MACAN,MAAM,CACJ,MAAMA,MAAM,CAACgC,cAAc,CAAC,CACzBrD,oBAAoB,CAAC;QACpB2B,wBAAwB;QAAEI,gBAAgB,EAAE;MAC9C,CAAC,CAAC,CACL,CACEH,GAAG,CACHC,YAAY,EAAE;;MAEjB;MACAR,MAAM,CACJ,MAAMA,MAAM,CAACiC,qBAAqB,CAAC,CAChCtD,oBAAoB,CAAC;QACpB2B,wBAAwB;QAAEI,gBAAgB,EAAE;MAC9C,CAAC,CAAC,CACL,CACEoB,OAAO,EAAE;MAEZ9B,MAAM,CAAC5B,EAAE,CAACwB,UAAU,CAACiC,iBAAiB,CAAC,CAAC,CACrCpB,IAAI,CAAC,IAAI,CAAC;MAEbT,MAAM,CAAC5B,EAAE,CAACc,YAAY,CAAC2C,iBAAiB,CAAC,CAAC,CAACP,OAAO,CAACY,yBAAyB,CAAC;MAC7E;MACAlC,MAAM,CAACvB,MAAM,CAACoD,iBAAiB,CAAC,CAAC,CAC9BE,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC;IAClC,CAAC,CAAC;IAEF1B,EAAE,CAAC,gEAAgE,EAAE,MAAM;MACzE,MAAMC,wBAAwB,GAAGd,wCAAwC,EAAE;MAC3E,MAAMqC,iBAAiB,GAAGvD,IAAI,CAACe,IAAI,CAACL,SAAS,EAAEG,aAAa,EAAE,EAAG,GAAEmB,wBAAyB,WAAU,CAAC;MACvG;MACAN,MAAM,CACJ,MAAMA,MAAM,CAACf,SAAS,CAAC,CACpBN,oBAAoB,CAAC;QACpB2B,wBAAwB;QACxB6B,aAAa,EAAE;MACjB,CAAC,CAAC,CACL,CACE5B,GAAG,CACHC,YAAY,EAAE;;MAEjB;MACAR,MAAM,CACJ,MAAMA,MAAM,CAACyB,aAAa,CAAC,CACxB9C,oBAAoB,CAAC;QACpB2B,wBAAwB;QACxB6B,aAAa,EAAE;MACjB,CAAC,CAAC,CACL,CACEL,OAAO,EAAE;MAEZ9B,MAAM,CAAC5B,EAAE,CAACwB,UAAU,CAACiC,iBAAiB,CAAC,CAAC,CACrCpB,IAAI,CAAC,IAAI,CAAC;MAEbT,MAAM,CAACvB,MAAM,CAACoD,iBAAiB,CAAC,CAAC,CAC9BO,aAAa,CAAC;QACbC,KAAK,EAAE,GAAG;QACVC,MAAM,EAAE,GAAG;QACXC,IAAI,EAAE;MACR,CAAC,CAAC;IACN,CAAC,CAAC;IAEFlC,EAAE,CAAC,8DAA8D,EAAE,MAAM;MACvE,MAAMC,wBAAwB,GAAGd,wCAAwC,EAAE;MAC3E,MAAMqC,iBAAiB,GAAGvD,IAAI,CAACe,IAAI,CAACL,SAAS,EAAEG,aAAa,EAAE,EAAG,GAAEmB,wBAAyB,WAAU,CAAC;MACvG;MACAN,MAAM,CACJ,MAAMA,MAAM,CAACf,SAAS,CAAC,CACpBN,oBAAoB,CAAC;QACpB2B,wBAAwB;QACxB6B,aAAa,EAAE;MACjB,CAAC,CAAC,CACL,CACE5B,GAAG,CACHC,YAAY,EAAE;;MAEjB;MACAR,MAAM,CACJ,MAAMA,MAAM,CAACyB,aAAa,CAAC,CACxB9C,oBAAoB,CAAC;QACpB2B,wBAAwB;QACxB6B,aAAa,EAAE;MACjB,CAAC,CAAC,CACL,CACEL,OAAO,EAAE;MAEZ9B,MAAM,CAAC5B,EAAE,CAACwB,UAAU,CAACiC,iBAAiB,CAAC,CAAC,CACrCpB,IAAI,CAAC,IAAI,CAAC;MAEbT,MAAM,CAACvB,MAAM,CAACoD,iBAAiB,CAAC,CAAC,CAC9BO,aAAa,CAAC;QACbC,KAAK,EAAE,GAAG;QACVC,MAAM,EAAE,GAAG;QACXC,IAAI,EAAE;MACR,CAAC,CAAC;IACN,CAAC,CAAC;IAEFlC,EAAE,CAAC,oEAAoE,EAAE,MAAM;MAC7E,MAAMC,wBAAwB,GAAGd,wCAAwC,EAAE;MAC3E;MACAQ,MAAM,CACJ,MAAMA,MAAM,CAACf,SAAS,CAAC,CACpBN,oBAAoB,CAAC;QAAE2B;MAAyB,CAAC,CAAC,CACtD,CAACC,GAAG,CAACC,YAAY,EAAE;;MAEpB;MACAR,MAAM,CACJ,MAAMA,MAAM,CAACyB,aAAa,CAAC,CAAC9C,oBAAoB,CAAC;QAAE2B;MAAyB,CAAC,CAAC,CAC/E,CAACwB,OAAO,EAAE;;MAEX;MACA9B,MAAM,CACJ,MAAMA,MAAM,CAACf,SAAS,CAAC,CAACN,oBAAoB,CAAC;QAAE2B;MAAyB,CAAC,CAAC,CAC3E,CAACC,GAAG,CAACC,YAAY,EAAE;MAEpBR,MAAM,CAACL,UAAU,CAACW,wBAAwB,CAAC,CAAC,CACzCG,IAAI,CAAC,KAAK,CAAC;IAChB,CAAC,CAAC;IAEFJ,EAAE,CAAC,gCAAgC,EAAE,MAAM;MACzC,MAAM2B,cAAc,GAAG5D,EAAE,CAACc,YAAY,CAACL,SAAS,CAAC,oBAAoB,CAAC,CAAC;MACvE,MAAMoD,qBAAqB,GAAG7D,EAAE,CAACc,YAAY,CAACL,SAAS,CAAC,2BAA2B,CAAC,CAAC;MACrF,MAAMyB,wBAAwB,GAAGd,wCAAwC,EAAE;MAC3E;MACAQ,MAAM,CACJ,MAAMA,MAAM,CAACgC,cAAc,CAAC,CAACrD,oBAAoB,CAAC;QAAE2B;MAAyB,CAAC,CAAC,CAChF,CAACC,GAAG,CAACC,YAAY,EAAE;;MAEpB;MACAR,MAAM,CACJ,MAAMA,MAAM,CAACiC,qBAAqB,CAAC,CAACtD,oBAAoB,CAAC;QAAE2B;MAAyB,CAAC,CAAC,CACvF,CAACwB,OAAO,CAAC,6CAA6C,CAAC;IAC1D,CAAC,CAAC;IAEFlD,QAAQ,CAAC,qBAAqB,EAAE,MAAM;MACpCyB,EAAE,CAAC,2CAA2C,EAAE,MAAM;QACpD,MAAM2B,cAAc,GAAG5D,EAAE,CAACc,YAAY,CAACL,SAAS,CAAC,mBAAmB,CAAC,CAAC;QACtE,MAAMoD,qBAAqB,GAAG7D,EAAE,CAACc,YAAY,CAACL,SAAS,CAAC,mBAAmB,CAAC,CAAC;QAC7E,MAAMyB,wBAAwB,GAAGd,wCAAwC,EAAE;QAC3E;QACAQ,MAAM,CACJ,MAAMA,MAAM,CAACgC,cAAc,CAAC,CACzBrD,oBAAoB,CAAC;UACpByC,gBAAgB,EAAE,IAAI;UACtBC,oBAAoB,EAAE,SAAS;UAC/Bf;QACF,CAAC,CAAC,CACL,CACEC,GAAG,CACHC,YAAY,EAAE;;QAEjB;QACAR,MAAM,CACJ,MAAMA,MAAM,CAACiC,qBAAqB,CAAC,CAChCtD,oBAAoB,CAAC;UACpByC,gBAAgB,EAAE,IAAI;UACtBC,oBAAoB,EAAE,SAAS;UAC/Bf;QACF,CAAC,CAAC,CACL,CACEC,GAAG,CACHC,YAAY,EAAE;MACnB,CAAC,CAAC;MACFH,EAAE,CAAC,4BAA4B,EAAE,MAAM;QACrC,MAAM2B,cAAc,GAAG5D,EAAE,CAACc,YAAY,CAACL,SAAS,CAAC,mBAAmB,CAAC,CAAC;QACtE,MAAMoD,qBAAqB,GAAG7D,EAAE,CAACc,YAAY,CAACL,SAAS,CAAC,mBAAmB,CAAC,CAAC;QAC7E,MAAMyB,wBAAwB,GAAGd,wCAAwC,EAAE;QAC3E;QACAQ,MAAM,CACJ,MAAMA,MAAM,CAACgC,cAAc,CAAC,CACzBrD,oBAAoB,CAAC;UACpB+B,gBAAgB,EAAE,MAAM;UACxBU,gBAAgB,EAAE,IAAI;UACtBC,oBAAoB,EAAE,SAAS;UAC/Bf;QACF,CAAC,CAAC,CACL,CACEC,GAAG,CACHC,YAAY,EAAE;;QAEjB;QACAR,MAAM,CACJ,MAAMA,MAAM,CAACiC,qBAAqB,CAAC,CAChCtD,oBAAoB,CAAC;UACpB+B,gBAAgB,EAAE,MAAM;UACxBU,gBAAgB,EAAE,IAAI;UACtBC,oBAAoB,EAAE,SAAS;UAC/Bf,wBAAwB;UACxB;UACAkC,YAAY,EAAE;QAChB,CAAC,CAAC,CACL,CACEV,OAAO,CAAC,6CAA6C,CAAC;MAC3D,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"}