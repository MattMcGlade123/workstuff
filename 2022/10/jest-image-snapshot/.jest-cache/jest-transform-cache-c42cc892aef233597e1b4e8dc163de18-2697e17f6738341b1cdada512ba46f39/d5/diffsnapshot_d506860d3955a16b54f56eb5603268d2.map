{"version":3,"names":["childProcess","require","fs","path","mkdirp","pixelmatch","ssim","PNG","rimraf","glur","ImageComposer","createImageResizer","width","height","source","resized","fill","bitblt","fillSizeDifference","image","inArea","x","y","idx","data","defaultPixelmatchDiffConfig","threshold","defaultSSIMDiffConfig","ssimMatch","newImageData","baselineImageData","diffImageData","imageWidth","imageHeight","diffConfig","newImage","baselineImage","ssim_map","mssim","diffPixels","diffRgbaPixels","DataView","buffer","byteOffset","ln","pos","rpos","diffValue","Math","floor","round","setUint32","alignImagesToSameSize","firstImage","secondImage","firstImageWidth","firstImageHeight","secondImageWidth","secondImageHeight","resizeToSameSize","max","resizedFirst","resizedSecond","isFailure","pass","updateSnapshot","shouldUpdate","updatePassedSnapshot","shouldFail","totalPixels","diffPixelCount","hasSizeMismatch","allowSizeMismatch","failureThresholdType","failureThreshold","diffSize","diffRatio","Error","diffImageToSnapshot","options","receivedImageBuffer","snapshotIdentifier","snapshotsDir","storeReceivedOnFailure","receivedDir","join","diffDir","diffDirection","customDiffConfig","blur","comparisonMethod","comparisonFn","result","baselineSnapshotPath","existsSync","sync","dirname","writeFileSync","added","receivedSnapshotPath","diffOutputPath","defaultDiffConfig","Object","assign","rawReceivedImage","read","rawBaselineImage","readFileSync","imageDimensions","receivedHeight","receivedWidth","baselineHeight","baselineWidth","receivedImage","diffImage","composer","direction","addImage","composerParams","getParams","compositeResultImage","compositeWidth","compositeHeight","images","forEach","index","imageData","offsetX","offsetY","pngBuffer","write","filterType","imgSrcString","toString","updated","runDiffImageToSnapshot","serializedInput","JSON","stringify","writeDiffProcess","spawnSync","process","execPath","__dirname","input","Buffer","from","stdio","maxBuffer","status","output","parse","error","message","module","exports"],"sources":["diff-snapshot.js"],"sourcesContent":["/*\n * Copyright (c) 2017 American Express Travel Related Services Company, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nconst childProcess = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\nconst mkdirp = require('mkdirp');\nconst pixelmatch = require('pixelmatch');\nconst ssim = require('ssim.js');\nconst { PNG } = require('pngjs');\nconst rimraf = require('rimraf');\nconst glur = require('glur');\nconst ImageComposer = require('./image-composer');\n\n/**\n * Helper function to create reusable image resizer\n */\nconst createImageResizer = (width, height) => (source) => {\n  const resized = new PNG({ width, height, fill: true });\n  PNG.bitblt(source, resized, 0, 0, source.width, source.height, 0, 0);\n  return resized;\n};\n\n/**\n * Fills diff area with black transparent color for meaningful diff\n */\n/* eslint-disable no-plusplus, no-param-reassign, no-bitwise */\nconst fillSizeDifference = (width, height) => (image) => {\n  const inArea = (x, y) => y > height || x > width;\n  for (let y = 0; y < image.height; y++) {\n    for (let x = 0; x < image.width; x++) {\n      if (inArea(x, y)) {\n        const idx = ((image.width * y) + x) << 2;\n        image.data[idx] = 0;\n        image.data[idx + 1] = 0;\n        image.data[idx + 2] = 0;\n        image.data[idx + 3] = 64;\n      }\n    }\n  }\n  return image;\n};\n/* eslint-enabled */\n/**\n * This was originally embedded in diffImageToSnapshot\n * when it only worked with pixelmatch.  It has a default\n * threshold of 0.01 defined in terms of what it means to pixelmatch.\n * It has been moved here as part of the SSIM implementation to make it\n * a little easier to read and find.\n * More information about this can be found under the options section listed\n * in https://github.com/mapbox/pixelmatch/README.md and in the original pixelmatch\n * code.  There is also some documentation on this in our README.md under the\n * customDiffConfig option.\n * @type {{threshold: number}}\n */\nconst defaultPixelmatchDiffConfig = {\n  threshold: 0.01,\n};\n/**\n * This is the default SSIM diff configuration\n * for the jest-image-snapshot's use of the ssim.js\n * library.  Bezkrovny is a specific SSIM algorithm optimized\n * for speed by downsampling the origin image into a smaller image.\n * For the small loss in precision, it is roughly 9x faster than the\n * SSIM preset 'fast' -- which is modeled after the original SSIM whitepaper.\n * Wang, et al. 2004 on \"Image Quality Assessment: From Error Visibility to Structural Similarity\"\n * (https://github.com/obartra/ssim/blob/master/assets/ssim.pdf)\n * Most users will never need or want to change this -- unless --\n * they want to get a better quality generated diff.\n * @type {{ssim: string}}\n */\nconst defaultSSIMDiffConfig = { ssim: 'bezkrovny' };\n\n/**\n * Helper function for SSIM comparison that allows us to use the existing diff\n * config that works with jest-image-snapshot to pass parameters\n * that will work with SSIM.  It also transforms the parameters to match the spec\n * required by the SSIM library.\n */\nconst ssimMatch = (\n  newImageData,\n  baselineImageData,\n  diffImageData,\n  imageWidth,\n  imageHeight,\n  diffConfig\n) => {\n  const newImage = { data: newImageData, width: imageWidth, height: imageHeight };\n  const baselineImage = { data: baselineImageData, width: imageWidth, height: imageHeight };\n  // eslint-disable-next-line camelcase\n  const { ssim_map, mssim } = ssim.ssim(newImage, baselineImage, diffConfig);\n  // Converts the SSIM value to different pixels based on image width and height\n  // conforms to how pixelmatch works.\n  const diffPixels = (1 - mssim) * imageWidth * imageHeight;\n  const diffRgbaPixels = new DataView(diffImageData.buffer, diffImageData.byteOffset);\n  for (let ln = 0; ln !== imageHeight; ++ln) {\n    for (let pos = 0; pos !== imageWidth; ++pos) {\n      const rpos = (ln * imageWidth) + pos;\n      // initial value is transparent.  We'll add in the SSIM offset.\n      // red (ff) green (00) blue (00) alpha (00)\n      const diffValue = 0xff000000 + Math.floor(0xff *\n        (1 - ssim_map.data[\n          // eslint-disable-next-line no-mixed-operators\n          (ssim_map.width * Math.round(ssim_map.height * ln / imageHeight)) +\n          // eslint-disable-next-line no-mixed-operators\n          Math.round(ssim_map.width * pos / imageWidth)]));\n      diffRgbaPixels.setUint32(rpos * 4, diffValue);\n    }\n  }\n  return diffPixels;\n};\n\n/**\n * Aligns images sizes to biggest common value\n * and fills new pixels with transparent pixels\n */\nconst alignImagesToSameSize = (firstImage, secondImage) => {\n  // Keep original sizes to fill extended area later\n  const firstImageWidth = firstImage.width;\n  const firstImageHeight = firstImage.height;\n  const secondImageWidth = secondImage.width;\n  const secondImageHeight = secondImage.height;\n  // Calculate biggest common values\n  const resizeToSameSize = createImageResizer(\n    Math.max(firstImageWidth, secondImageWidth),\n    Math.max(firstImageHeight, secondImageHeight)\n  );\n  // Resize both images\n  const resizedFirst = resizeToSameSize(firstImage);\n  const resizedSecond = resizeToSameSize(secondImage);\n  // Fill resized area with black transparent pixels\n  return [\n    fillSizeDifference(firstImageWidth, firstImageHeight)(resizedFirst),\n    fillSizeDifference(secondImageWidth, secondImageHeight)(resizedSecond),\n  ];\n};\n\nconst isFailure = ({ pass, updateSnapshot }) => !pass && !updateSnapshot;\n\nconst shouldUpdate = ({ pass, updateSnapshot, updatePassedSnapshot }) => (\n  (!pass && updateSnapshot) || (pass && updatePassedSnapshot)\n);\n\nconst shouldFail = ({\n  totalPixels,\n  diffPixelCount,\n  hasSizeMismatch,\n  allowSizeMismatch,\n  failureThresholdType,\n  failureThreshold,\n}) => {\n  let pass = false;\n  let diffSize = false;\n  const diffRatio = diffPixelCount / totalPixels;\n  if (hasSizeMismatch) {\n    // do not fail if allowSizeMismatch is set\n    pass = allowSizeMismatch;\n    diffSize = true;\n  }\n  if (!diffSize || pass === true) {\n    if (failureThresholdType === 'pixel') {\n      pass = diffPixelCount <= failureThreshold;\n    } else if (failureThresholdType === 'percent') {\n      pass = diffRatio <= failureThreshold;\n    } else {\n      throw new Error(`Unknown failureThresholdType: ${failureThresholdType}. Valid options are \"pixel\" or \"percent\".`);\n    }\n  }\n  return {\n    pass,\n    diffSize,\n    diffRatio,\n  };\n};\n\nfunction diffImageToSnapshot(options) {\n  const {\n    receivedImageBuffer,\n    snapshotIdentifier,\n    snapshotsDir,\n    storeReceivedOnFailure,\n    receivedDir = path.join(options.snapshotsDir, '__received_output__'),\n    diffDir = path.join(options.snapshotsDir, '__diff_output__'),\n    diffDirection,\n    updateSnapshot = false,\n    updatePassedSnapshot = false,\n    customDiffConfig = {},\n    failureThreshold,\n    failureThresholdType,\n    blur,\n    allowSizeMismatch = false,\n    comparisonMethod = 'pixelmatch',\n  } = options;\n\n  const comparisonFn = comparisonMethod === 'ssim' ? ssimMatch : pixelmatch;\n  let result = {};\n  const baselineSnapshotPath = path.join(snapshotsDir, `${snapshotIdentifier}.png`);\n  if (!fs.existsSync(baselineSnapshotPath)) {\n    mkdirp.sync(path.dirname(baselineSnapshotPath));\n    fs.writeFileSync(baselineSnapshotPath, receivedImageBuffer);\n    result = { added: true };\n  } else {\n    const receivedSnapshotPath = path.join(receivedDir, `${snapshotIdentifier}-received.png`);\n    rimraf.sync(receivedSnapshotPath);\n\n    const diffOutputPath = path.join(diffDir, `${snapshotIdentifier}-diff.png`);\n    rimraf.sync(diffOutputPath);\n\n    const defaultDiffConfig = comparisonMethod !== 'ssim' ? defaultPixelmatchDiffConfig : defaultSSIMDiffConfig;\n\n    const diffConfig = Object.assign({}, defaultDiffConfig, customDiffConfig);\n\n    const rawReceivedImage = PNG.sync.read(receivedImageBuffer);\n    const rawBaselineImage = PNG.sync.read(fs.readFileSync(baselineSnapshotPath));\n    const hasSizeMismatch = (\n      rawReceivedImage.height !== rawBaselineImage.height ||\n      rawReceivedImage.width !== rawBaselineImage.width\n    );\n    const imageDimensions = {\n      receivedHeight: rawReceivedImage.height,\n      receivedWidth: rawReceivedImage.width,\n      baselineHeight: rawBaselineImage.height,\n      baselineWidth: rawBaselineImage.width,\n    };\n    // Align images in size if different\n    const [receivedImage, baselineImage] = hasSizeMismatch\n      ? alignImagesToSameSize(rawReceivedImage, rawBaselineImage)\n      : [rawReceivedImage, rawBaselineImage];\n    const imageWidth = receivedImage.width;\n    const imageHeight = receivedImage.height;\n\n    if (typeof blur === 'number' && blur > 0) {\n      glur(receivedImage.data, imageWidth, imageHeight, blur);\n      glur(baselineImage.data, imageWidth, imageHeight, blur);\n    }\n\n    const diffImage = new PNG({ width: imageWidth, height: imageHeight });\n\n    let diffPixelCount = 0;\n\n    diffPixelCount = comparisonFn(\n      receivedImage.data,\n      baselineImage.data,\n      diffImage.data,\n      imageWidth,\n      imageHeight,\n      diffConfig\n    );\n\n    const totalPixels = imageWidth * imageHeight;\n\n    const {\n      pass,\n      diffSize,\n      diffRatio,\n    } = shouldFail({\n      totalPixels,\n      diffPixelCount,\n      hasSizeMismatch,\n      allowSizeMismatch,\n      failureThresholdType,\n      failureThreshold,\n    });\n\n    if (isFailure({ pass, updateSnapshot })) {\n      if (storeReceivedOnFailure) {\n        mkdirp.sync(path.dirname(receivedSnapshotPath));\n        fs.writeFileSync(receivedSnapshotPath, receivedImageBuffer);\n        result = { receivedSnapshotPath };\n      }\n\n      mkdirp.sync(path.dirname(diffOutputPath));\n      const composer = new ImageComposer({\n        direction: diffDirection,\n      });\n\n      composer.addImage(baselineImage, imageWidth, imageHeight);\n      composer.addImage(diffImage, imageWidth, imageHeight);\n      composer.addImage(receivedImage, imageWidth, imageHeight);\n\n      const composerParams = composer.getParams();\n\n      const compositeResultImage = new PNG({\n        width: composerParams.compositeWidth,\n        height: composerParams.compositeHeight,\n      });\n\n      // copy baseline, diff, and received images into composite result image\n      composerParams.images.forEach((image, index) => {\n        PNG.bitblt(\n          image.imageData, compositeResultImage, 0, 0, image.imageWidth, image.imageHeight,\n          composerParams.offsetX * index, composerParams.offsetY * index\n        );\n      });\n      // Set filter type to Paeth to avoid expensive auto scanline filter detection\n      // For more information see https://www.w3.org/TR/PNG-Filters.html\n      const pngBuffer = PNG.sync.write(compositeResultImage, { filterType: 4 });\n      fs.writeFileSync(diffOutputPath, pngBuffer);\n\n      result = {\n        ...result,\n        pass: false,\n        diffSize,\n        imageDimensions,\n        diffOutputPath,\n        diffRatio,\n        diffPixelCount,\n        imgSrcString: `data:image/png;base64,${pngBuffer.toString('base64')}`,\n      };\n    } else if (shouldUpdate({ pass, updateSnapshot, updatePassedSnapshot })) {\n      mkdirp.sync(path.dirname(baselineSnapshotPath));\n      fs.writeFileSync(baselineSnapshotPath, receivedImageBuffer);\n      result = { updated: true };\n    } else {\n      result = {\n        pass,\n        diffSize,\n        diffRatio,\n        diffPixelCount,\n        diffOutputPath,\n      };\n    }\n  }\n  return result;\n}\n\nfunction runDiffImageToSnapshot(options) {\n  options.receivedImageBuffer = options.receivedImageBuffer.toString('base64');\n\n  const serializedInput = JSON.stringify(options);\n\n  let result = {};\n\n  const writeDiffProcess = childProcess.spawnSync(\n    process.execPath, [`${__dirname}/diff-process.js`],\n    {\n      input: Buffer.from(serializedInput),\n      stdio: ['pipe', 'inherit', 'inherit', 'pipe'],\n      maxBuffer: 10 * 1024 * 1024, // 10 MB\n    }\n  );\n\n  if (writeDiffProcess.status === 0) {\n    const output = writeDiffProcess.output[3].toString();\n    result = JSON.parse(output);\n  } else {\n    throw new Error(`Error running image diff: ${(writeDiffProcess.error && writeDiffProcess.error.message) || 'Unknown Error'}`);\n  }\n\n  return result;\n}\n\nmodule.exports = {\n  diffImageToSnapshot,\n  runDiffImageToSnapshot,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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"}